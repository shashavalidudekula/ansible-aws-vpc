---
- name: Setup vprofile Stack
  hosts: localhost
  connection: local
  gather_facts: no
  tasks:
    - name: Import VPC Setup output Variables
      include_vars: vars/output_vars

    - name: Import vprofile Stack Variables
      include_vars: vars/vprofilestack_setup

    - name: Import VPC setup Variables
      include_vars: vars/vpc_setup

    - name: create vprofile stack ec2 key
      ec2_key: 
        name: vprofilestack
        region: "{{region}}"
      register: vprofilekey_out

    - name: save private key to file
      copy:
        content: "{{vprofilekey_out.key.private_key}}"
        dest: "./vprofilestack.pem"
        mode: 0600
      when: vprofilekey_out.changed

    - name: Create Security group for Load Balancer
      ec2_group:
        name: vprofileELB-SG
        description: Allow port 80 from everywhere and all port within SG
        region: "{{region}}"
        vpc_id: "{{vpcid}}"
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
      register: vprofileELBSG_out

    - name: Security Group for Vprofile Stack
      ec2_group:
        name: vprofileStack-SG
        description: Allow port 22 from everywhere and all port within SG
        region: "{{region}}"
        vpc_id: "{{vpcid}}"
        purge_rules: no
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            group_id: "{{vprofileELBSG_out.group_id}}"

          - proto: tcp
            from_port: 22
            to_port: 22
            group_id: "{{bastionSGid}}"
      register: vprofileStackSG_out

    - name: Update Security group with its own SG id
      ec2_group:
        name: vprofileStack-SG
        description: Allow port 22 within SG
        region: "{{region}}"
        vpc_id: "{{vpcid}}"
        purge_rules: no
        rules:
          - proto: all
            group_id: "{{vprofileStackSG_out.group_id}}"

    - name: Creating Nginx web01
      ec2:  
        key_name: vprofilestack
        region: "{{region}}"
        instance_type: t2.micro
        image: "{{nginx_ami}}"
        wait: yes
        wait_timeout: 300
        instance_tags:
          Name: "web01"
          Project: vprofile
          Owner: Devops Team
        exact_count: 1
        count_tag:
          Name: "web01"
          Project: vprofile
          Owner: Devops Team
        group_id: "{{vprofileStackSG_out.group_id}}"
        vpc_subnet_id: "{{privsub1id}}"
      register: web01_out

    - name: Creating tomcat app01
      ec2:
        key_name: vprofilestack
        region: "{{region}}"
        instance_type: t2.micro
        image: "{{tomcat_ami}}"
        wait: yes
        wait_timeout: 300
        instance_tags: 
          Name: "app01"
          Project: vprofile
          Owner: Devops Team
        exact_count: 1
        count_tag: 
          Name: "app01"
          Project: vprofile
          Owner: Devops Team
        group_id: "{{vprofileStackSG_out.group_id}}"
        vpc_subnet_id: "{{privsub1id}}"
      register: app01_out

    - name: Creating memcahe mc01
      ec2:
        key_name: vprofilestack
        region: "{{region}}"
        instance_type: t2.micro
        image: "{{memcache_ami}}"
        wait: yes
        wait_timeout: 300
        instance_tags: 
          Name: "mc01"
          Project: vprofile
          Owner: Devops Team
        exact_count: 1
        count_tag: 
          Name: "mc01"
          Project: vprofile
          Owner: Devops Team
        group_id: "{{vprofileStackSG_out.group_id}}"
        vpc_subnet_id: "{{privsub1id}}"
      register: mc01_out

    - name: Creating RabbitMQ rmq01
      ec2:
        key_name: vprofilestack
        region: "{{region}}"
        instance_type: t2.micro
        image: "{{rmq_ami}}"
        wait: yes
        wait_timeout: 300
        instance_tags: 
          Name: "rmq01"
          Project: vprofile
          Owner: Devops Team
        exact_count: 1
        count_tag: 
          Name: "rmq01"
          Project: vprofile
          Owner: Devops Team
        group_id: "{{vprofileStackSG_out.group_id}}"
        vpc_subnet_id: "{{privsub1id}}"
      register: rmq01_out

    - name: Creating MySQL db01
      ec2:
        key_name: vprofilestack
        region: "{{region}}"
        instance_type: t2.micro
        image: "{{mysql_ami}}"
        wait: yes
        wait_timeout: 300
        instance_tags: 
          Name: "db01"
          Project: vprofile
          Owner: Devops Team
        exact_count: 1
        count_tag: 
          Name: "db01"
          Project: vprofile
          Owner: Devops Team
        group_id: "{{vprofileStackSG_out.group_id}}"
        vpc_subnet_id: "{{privsub1id}}"
      register: db01_out

    - debug:
        var: "{{item}}.tagged_instances[0].id"
      loop:
        - db01_out
        - rmq01_out
        - mc01_out
        - app01_out
        - web01_out

    - debug:
        var: db01_out

    - local_action:
        module: ec2_elb_lb
        name: "vprofile-elb"
        region: "{{region}}"
        state: present
        instance_ids:
          - "{{web01_out.tagged_instance[0].id}}"
        purge_instance_ids: true
        security_group_ids: "{{vprofileELBSG_out.group_id}}"
        subnets:
          - "{{pubsub1id}}"
          - "{{pubsub2id}}"
          - "{{pubsub3id}}"
        listeners:
          - protocol: http
            load_balancer_port: 80
            instance_port: 80

    - name: Insert/update Hosts IP & name in file provision-stack/group_vars/hostsip
      blockinfile:
        path: provision-stack/group_vars/hostsip
        block: |
          web01_ip: "{{web01_out.tagged_instances[0].private_ip}}"
          app01_ip: "{{app01_out.tagged_instances[0].private_ip}}"
          mc01_ip: "{{mc01_out.tagged_instances[0].private_ip}}"
          rmq01_ip: "{{rmq01_out.tagged_instances[0].private_ip}}"
          db01_ip: "{{db01_out.tagged_instances[0].private_ip}}"
      
    - name: copy login key to provision_stack der
      copy:
        src: "./vprofilestack.pem"
        dest: provision-stack/vprofilestack.pem
        mode: 0400

    - name: creating dynamic inventory file
      blockinfile:
        path: provision_stack/inventory-vprofile
        block: |
          web01 ansible_host= {{web01_out.tagged_instances[0].private_ip}}
          app01 ansible_host= {{app01_out.tagged_instances[0].private_ip}}
          mc01 ansible_host= {{mc01_out.tagged_instances[0].private_ip}}
          rmq01 ansible_host= {{rmq01_out.tagged_instances[0].private_ip}}
          db01 ansible_host= {{db01_out.tagged_instances[0].private_ip}}
          cntrl ansible_host=127.0.0.1 ansible_connection=local

          [webservers]
          web01

          [appservers]
          app01

          [rmqservers] #RabbitMQServers
          rmq01

          [mcservers] #memcacheServers
          mc01

          [dbservers]
          db01

          [control]
          cntrl

          [stack:children]
          webservers
          appservers
          rmqservers
          mcservers
          dbservers

          [stack:vars]
          ansible_user=ubuntu
          ansible_ssh_private_key_file=./provision-stack/vprofilestack.pem
          #ansible_python_interpreter=/usr/bin/python3
